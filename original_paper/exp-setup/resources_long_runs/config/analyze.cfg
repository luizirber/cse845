#############################################################################
# This file is used to setup avida when its in analysis-only mode (by
# running "avida -a".  It gives a variety of methods to load organisms
# (specifying the type of each) and gives a list of tests that should be
# performed on all of them.  Multiple batches of genotypes can be loaded
# when needed for specific tests.
#
# A minus ('-') is placed in front of those commands not fully implemented.
#
# Input formats:
#  LOAD_ORGANISM <file>     -  A normal organism file, as output from avida
#  LOAD_BASE_DUMP <file>    -  A basic dump file...
#  LOAD_DETAIL_DUMP <file>  -  Input from dump_detail or dump_historic.
#  LOAD_SEQUENCE <sequence> -  Load a specific sequence into memory.
#
#  -LOAD_DOMINANT [file="dominant.dat"] [dir="genebank/"] [freq=1]
#	Load dominant organisms from 'file' that can be found in 'dir',
#	taking only one ever 'freq' lines.
#
# Reduction:
#  FIND_GENOTYPE [type="num_cpus"]
#	Remove all genotypes but the one selected.  Type indicates which
#	organism to choose.  Options are to find the organism with the
#	maximum in "num_cpus" (number of organisms at time of printing),
#       "total_cpus" (number of organisms ever), "fitness", "merit".  If
#	a number is given for type, it is used as an id number to indicate
#	the desired genotype.
#
#  FIND_LINEAGE [type="num_cpus"]
#	Delete everything except the lineage from the chosen organism back
#	to the ancestor.  Type is the same as the FIND command.
#
#  SAMPLE_ORGANISMS <fraction>
#	Keep only "fraction" of organisms in the current batch.  This
#       is done per organism, not per genotype.  Thus, genotypes of high
#       abundance will only have their abundance lowered, while genotypes
#	of abundance 1 will either stay or be removed entirely.
#
#  SAMPLE_GENOTYPES <fraction>
#	Keept only fraction of genotypes in the current batch.
#
# Output:
#  PRINT [dir="genebank/"]
#	Just print the organisms from the current batch as basic files in
#       the directory given.
#
#  TRACE [dir="genebank/"]
#       Trace all of the organisms and print a listing of their execution.
#
#  PRINT_TASKS [file="tasks.dat"]
#	Print out the tasks doable by each genotype.
#
#  RENAME
#	Change the names of all the genotypes to start at one.
#
#  LANDSCAPE [file="landscape.dat"] [dist=1]
#	Do full landscapping on each organism
#
#  FITNESS_MATRIX [depth-limit=4] [fitness-threshold=.9]
#		  [hamming-thrshold=1] [error-rate-min=.005]
#		  [error-rate-max=.05] [error-rate-step=.005]
#		  [vector-output-fmax=1.1] [vector-output-fstep=.1]
#		  [diag_iters=200] [write_ham_vector=0]
#		  [write_full_vector=0]
#       Do the fitness matrix calculation. Detailed information on the
#	different parameters can be found in fitness_matrix.hh.
#
#  DETAIL [file="detail.dat"] [format ...]
#       Print out all of the stats for each organism, one per line.  The
#	format indicates the layout of columns in the file.  If the filename
#       given ends in ".html", html formatting will be used.
#
#  MAP [dir="phenotype/"] [flags ...] [format ...]
#	Construct a genotype-phenotype array for each organism in the
#	current batch.  The format is the list of stats that you want
#       to include as columns in the array.  Additionally you can have
#       special format flags; the possible flags are "html" to print output
#       in HTML format, and "link_maps" to create html links between
#       consecutive genotypes.
#
#  HAMMING [file="hamming.dat"] [b1=current] [b2=b1]
#	Calc hamming dist between batches b1 and b2; 'sample' is a
#	fraction between 0.0 and 1.0.  If only one batch is given (or
#	available) calculations are on all pairs within that batch.
#
#  LEVENSTEIN [file="lev.dat"] [b1=current] [b2=b1]
#	Calc levenstein dist between batches b1 and b2; 'sample' is a
#	fraction between 0.0 and 1.0.  If only one batch is given (or
#	available) calculations are on all pairs within that batch.
#
#  SPECIES [file="species.dat"] [b1=current] [b2=b1]
#	Calc species dist between batches b1 and b2; 'sample' is a
#	fraction between 0.0 and 1.0.  If only one batch is given (or
#	available) calculations are on all pairs within that batch.
#	Output:  Batch1Name  Batch2Name  AveDistance  Count  FailCount
#
#  ALIGN
#	Align all sequences; place '_'s in the sequences to align them.
#
# Control:
#  SET_BATCH <id>            -  Set the batch ID currently active; default is 0
#  NAME_BATCH <name>         -  Set a name to this batch...
#  PURGE_BATCH [id=current]  -  Remove all genotypes in a batch
#  STATUS                    -  Print status to analyze.log (for debug)
#  DEBUG                     -  Special debug function...
#  VERBOSE                   -  Toggle verbose/minimal log messages.
#  SYSTEM <command>          -  Run the following command on command line
#  INCLUDE <file> [file...]  -  Include other files into this one
#
#  DUPLICATE <id1> [id2=current]
#	Copy batch id2 of genotypes into id1.  By default, copy into the
#	current batch.
#
#  RECALCULATE
#	Run all of the organisms in the current batch through a test CPU
#	and use those values instead of those read in.
#
#
# Output Formats:
#  Several commands (such as DETAIL and MAP) require format parameters
#  to specify what genotypic features should be output.  Before the
#  such commands are used, other collection functions may need to be
#  run.
#
#  Allowable formats after a normal load (assuming they are given
#  in the input file) are: "id" (Genome ID), "parent_id" (Parent ID),
#  "num_cpus" (Number of CPUs), "total_cpus" (Total CPUs Ever), "length"
#  (Genome Length), "update_born" (Update Born), "update_dead" (Update
#  Dead), "depth" (Tree Depth), "sequence" (Genome Sequence),
#
#  After a RECALCULATE, the additional formats become available:
#  "viable" (Is Viable [0/1]), "copy_length" (Copied Length), "exe_length"
#  (Executed Length), "merit" (Merit), "comp_merit" (Computational Merit),
#  "gest_time" (Gestation Time), "efficiency" (Replication Efficiency),
#  "fitness" (Fitness)
#
#  If a FIND_LINEAGE was done before the RECALCULATE, the parent
#  genotype for each regular genotype will be available, enabling the
#  additional formats: "parent_dist" (Parent Distance), "comp_merit_ratio",
#  (Computational Merit Ratio [with parent]), "efficiency_ratio"
#  (Replication Efficiency Ratio [with parent]), "fitness_ratio" (Fitness
#  Ratio [with parent]), "parent_muts" (Mutations from Parent)
#  "html.sequence" (Genome Sequence in Color; html format)
#
#  Finally, if an ALIGN is run, one additional format is available:
# "alignment" (Aligned Sequence)
#
#
# Variables:
#  For the moment, all variables can only be a single character (letter or
#  number) and begin with a $ whenever they need to be translated to their
#  value.  Lowercase letters are global variables, capital letters are
#  local to a function, and number are arguments to a function.  A $$ will
#  act as a single dollersign, if needed.
#
#  SET <variable> <value>    - Sets the variable to the value...
#
#  FOREACH <variable> <value> [value ...]
#       Set the variable to each of the values listed, and run the following
#       code until an END is reached.
#
#  FORRANGE <variable> <min_value> <max_value> [step_value=1]
#       Set the variable to each of the values between min and max (at steps
#       given), and run the following code until an END is reached.
#
# Functions:
#  These functions are currently very primitive with fixed inputs of
#  $0 through $9.  $0 is always the function name, and then there can be up
#  to 9 other arguments passed through.  Once a function is created, it can
#  be run just like any other command.
#
#  FUNCTION <name>
#       Create a function of the given name, including all commands up until
#       and END is reached.  These commands are not executed until a RUN
#       command is used.
#
#
#  Currently there are no conditionals or mathematical commands in this
#  scripting language.
#
#############################################################################
#
# Todo: LOAD_DOMINANT
#	EVAL command for math (perhaps anything inside of [ and ] ?)
#	Write more and better example script (and some libraries?)
#       Write documentation for DETAIL data types
#       Setup task command to take args
#       Place tests in genotype "Get" methods to do lazy data collection
#
#############################################################################

# This example script loops through 100 through 109, clears out the current
# batch of genotypes (if there are any) and then loads the new population
# and all direct ancestors in.  From this population, it finds the dominant
# lineage, which it will to perform a number of measurments on.  These
# include landscaping, running them through test_cpus, printing all tasks
# that can be done at each stage of the lineage.

# VERBOSE
# FORRANGE i 100 149
#   PURGE_BATCH
#   SYSTEM gunzip 2input_$i/detail_pop.100000.gz
#   SYSTEM gunzip 2input_$i/historic_dump.100000.gz
#   LOAD_DETAIL_DUMP 2input_$i/detail_pop.100000
#   LOAD_DETAIL_DUMP 2input_$i/historic_dump.100000
#   FIND_LINEAGE
#   LANDSCAPE landscape.$i.dat
#   RECALCULATE
#   DETAIL detail.$i.html depth fitness merit length task.1:binary task.2:binary task.3:binary
#   PRINT_TASKS tasks.$i.dat
#   SYSTEM gzip 2input_$i/detail_pop.100000
#   SYSTEM gzip 2input_$i/historic_dump.100000
# END
