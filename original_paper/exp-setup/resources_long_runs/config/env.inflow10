##############################################################################
#
# Filename: environment.cfg
#
# This is the setup file for the new task/resource system, which takes the
# place of the old "task_set" and "resources" files.  Additionally, there
# are several events that can affect the inflow and outflow of resources in
# the environment.
# 
# Two main keywords are used in this file, RESOURCE and REACTION.  Their
# formats are:
# 
#   RESOURCE  name[:...]  {name:...}
#   REACTION  name  task  [process:...]  [requisite:...]
# 
# Where 'name' is a unique identifier.  Resources can be detailed by their
# quatities and flows; Reactions are further described by the task that
# triggers them, the processes they perform (including resources used and the
# results of using them), and requisites on when they can occur.
# 
# All entries on a resource line are names of individual resources.  A
# resource name can be follow by a ':' and then specific aspects can be
# specified.
#
#   'inflow' indicates the quantity entering the population
#      each update (spread evenly over the course of the update).   [0.0]
#   'outflow' is a value from 0 to 1, and indicates the fraction of
#      the resource drained out of the population over an update.   [0.0]
#   'initial' the quantity of resource at the start of run          [0.0]
#
# Resources have a quantity at each location in the population, and a
# global quantity depleatable by all organisms.  Typically only global or the
# local will be used alone in single experiment, but if both local and global
# resources are present, local is depleated first.  The resouce name "infinite"
# is used to refer to an undepleatable resource.  Currently the inflow,
# outflow, and initial in the description of the resource only refers to
# the global resources.
#
# As an example, to simulate a chemostat, we might have:
#   RESOURCE glucose:outflow=10000:outflow=0.2
# 
# This would create a resource called "glucose" that has a fixed inflow rate of
# 10000 units where 20% flows out every update.  (Leaving a steady state of
# 50,000 units if no organism-consumption occurs).
#
# When describing a reaction, the "process" portion determines consumption
# of resources, their byproducts, and the resulting bonuses.  There are
# several arguments (sepated by colons; example below) to detail the use of a
# resource.  Default values are in brackets:
# 
#   'resource' is the name of the resource consumed.                 [infinite]
#   'value' multiplied by the amount of the resource consumed gives bonus.
#      (0.5 may be inefficient, while 5.0 is very efficient.)        [1.0]
#   'type' determines how to apply the bonus.                        [add]
#      add: increase current merit by bonus
#      mult: multiply merit by current bonus (watch for bonus < 1)
#      pow: multiply merit by 2^bonus (positive bonus -> benefit)
#   'max' is the max amount of the resource consumed per occurance.  [1.0]
#   'min' is the min amount of resource required.                    [0.0]
#   'frac' is the max fraction of the resource that can be consumed. [1.0]
#   'product' is the name of the by-product resource.                [none]
#   'conversion' is the conversion rate to product resource.         [1.0]
# 
# If no process is given, a single associated process with all default
# settings is assumed.  If multiple process statements are given, *all* are
# acted upon when the reaction is triggered.
# 
# The "requisite" entry limits when this reaction can be triggered.  The
# following requisites (in any combination) are possible:
# 
#   'reaction' is a reaction that must be triggered first.           [none]
#   'noreaction' is a reaction that must NOT have been triggered.    [none]
#   'min_count' is min times task must be performed for bonus.       [0]
#   'max_count' is max times task can be performed for bonus.        [INT_MAX]
# 
# No restructions are present by default.  If there are multiple requisite 
# entries, only *one* of them need be satisfied in order to trigger the
# reaction.  Note though that a single requisite entry can have as many
# portions as needed.
# 
# EXAMPLES:
# 
# We could simulate the old system with a file including only lines like:
# 
#   REACTION AND logic:2a process:type=mult:value=4.0   requisite:max_count=1
#   REACTION EQU logic:2h process:type=mult:value=32.0  requisite:max_count=1
# 
# No RESOURCE statements need be included since only the infinite resource is
# used (by default, since we don't specify another resources' name)
#
# To create an environment with two resources that are converted back and
# forth as tasks are performed, we might have:
# 
#   RESOURCE  yummyA
#   RESOURCE  yummyB
#   REACTION  AtoB  gobbleA  process:resource=yummyA:frac=0.001:product=yummyB
#   REACTION  BtoA  gobbleB  process:resource=yummyB:frac=0.001:product=yummyA
# 
# A value of 1.0 per reaction is default.  Obviously "gobbleA" and "gobbleB"
# would have to be tasks described within avida.
# 
# A requisite against the other reaction being performed would prevent a
# single organism from garnering both rewards in equal measure.
# 
# 
# There are three main events that directly relate to resources.  These
# can be used to make changes in the quantities of resources locally, and
# cause more dramatic changes during the course of a run.  Global resources
# fluctuations should be described in the resource description, since they
# will update constantly, not just at update changes.
# 
#   resource_in  res_name  amount  cell_id
# 
# 	Introduces resources into the environment.  The 'amount' input
# 	indicates the numerical quatity to input, and 'cell_id' indicates
#	which cell to put the resource in.  If cell_id is -1 (the default),
#	this amount is globally accessable by all organisms.  A -2 indicates
#	that this amount is placed locally into _each_ cell.
# 
#   resource_out  res_name  fraction  cell_id
# 
# 	Removes resources from the environment.  The 'fraction' input is the
# 	portion of the current resource that flows out, and 'cell_id' works
# 	as in the previous event.
# 
#   resource_decay  from_resource  to_resource  rate  conversion  cell_id
# 
# 	Resource decay converts a portion of one resource into another.
# 	The 'from_resource' and 'to_resource' inputs determine the resources
# 	involved in this decay process, 'rate' is the portion of the
# 	from resource that decays, and 'conversion' is the the amount of the
# 	to resource that a single unit of the from resource will turn into.
# 	The 'cell_id' input works as above.
# 
#  [ Note: events triggered on an update begin with a 'u' followed by the
#    update number.  Periodic events then have a ':' and their frequency. ]
# 
# An environment with a fixed supply of resources that we periodically reset
# the quantities of might simply look like:
#   u 0:5000 resource_out  glucose    1.0
#   u 0:5000 resource_out  maltose    1.0
#   u 0:5000 resource_in   glucose  10000
#   u 0:5000 resource_in   maltose  10000
#
# And left to develop further on its own.
# 
# Limitations to this system:
# * Only a single resource can be required at a time, and only a single
#   by-product can be produced.
#
##############################################################################

# This environmental setup is that of a chemostat with 9 resources, each
# with a unique task corresponding to them.  All resources have a set inflow
# of 100, and outflow rate of 0.01, setting their an equilibrium level at
# 10,000.  Given a maximum population size of 3600 and neighborhood size of
# 9, the fraction of the resource absorbable in each reaction is simply
# 9/3600 or 0.0025.

RESOURCE  resNOT:inflow=10:outflow=0.01   resNAND:inflow=10:outflow=0.01
RESOURCE  resAND:inflow=10:outflow=0.01   resORN:inflow=10:outflow=0.01
RESOURCE  resOR:inflow=10:outflow=0.01    resANDN:inflow=10:outflow=0.01
RESOURCE  resNOR:inflow=10:outflow=0.01   resXOR:inflow=10:outflow=0.01
RESOURCE  resEQU:inflow=10:outflow=0.01

REACTION  NOT  not   process:resource=resNOT:value=1.0:frac=0.0025:max=5
REACTION  NAND nand  process:resource=resNAND:value=1.0:frac=0.0025:max=5
REACTION  AND  and   process:resource=resAND:value=1.0:frac=0.0025:max=5
REACTION  ORN  orn   process:resource=resORN:value=1.0:frac=0.0025:max=5
REACTION  OR   or    process:resource=resOR:value=1.0:frac=0.0025:max=5
REACTION  ANDN andn  process:resource=resANDN:value=1.0:frac=0.0025:max=5
REACTION  NOR  nor   process:resource=resNOR:value=1.0:frac=0.0025:max=5
REACTION  XOR  xor   process:resource=resXOR:value=1.0:frac=0.0025:max=5
REACTION  EQU  equ   process:resource=resEQU:value=1.0:frac=0.0025:max=5
