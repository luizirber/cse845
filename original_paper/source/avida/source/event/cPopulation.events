######## Meta Events ###########
exit
:descr:
/**
* Ends the Avida run immediately.
**/
:args:
:body:
cAvidaDriver_Base::main_driver->SetDone();

exit_if_generation_greater_than
:descr:
/**
* Ends the Avida run when the current generation exceeds the
* maximum generation given as parameter.
*
* Parameters:
* max generation (int)
*   The generation at which the run should be stopped.
**/
:args:
int max_generation
:body:
if( population->GetGeneration() > max_generation ){
  cAvidaDriver_Base::main_driver->SetDone();
}

exit_if_update_greater_than
:descr:
/**
* Ends the Avida run when the current update exceeds the
* maximum update given as parameter.
*
* Parameters:
* max update (int)
*   The update at which the run should be stopped.
**/
:args:
int max_update
:body:
if( population->GetUpdate() > max_update ){
  cAvidaDriver_Base::main_driver->SetDone();
}


exit_if_ave_lineage_label_smaller
:descr:
/**
* Halts the avida run if the current average lineage label is smaller
* than the value given as parameter.
*
* Parameters:
* lineage_label_crit_value (int)
*   The critical value to which the average lineage label is compared.
**/
:args:
double lineage_label_crit_value
:body:
if( population->GetStats().GetAveLineageLabel() < lineage_label_crit_value ){
  cAvidaDriver_Base::main_driver->SetDone();
}

exit_if_ave_lineage_label_larger
:descr:
/**
* Halts the avida run if the current average lineage label is larger
* than the value given as parameter.
*
* Parameters:
* lineage_label_crit_value (int)
*   The critical value to which the average lineage label is compared.
**/
:args:
double lineage_label_crit_value
:body:
if( population->GetStats().GetAveLineageLabel() > lineage_label_crit_value ){
  cAvidaDriver_Base::main_driver->SetDone();
}



echo
:descr:
/**
* Writes out a message. If no message is given, average update and
* generation are written out.
*
* Parameters:
* message (string)
**/
:args:
cString mesg
:body:
if( mesg == "" ){
   mesg.Set("Echo : Update = %f\t AveGeneration = %f",
	     population->GetUpdate(), population->GetGeneration());
}
cAvidaDriver_Base::main_driver->NotifyComment(mesg);

####### Printing Data Files ###########
print_data
:descr:
/**
* Output user-defined data from the cStats object...
*
* Parameters:
* filename (string)
*   The name of the data file.
* format
*   A comma-seperated list of statistics to output.
**/
:args:
cString filename
cString format
:body:
population->GetStats().PrintDataFile(filename, format, ',');

print_average_data
:descr:
/**
* Output various average quantities into datafile.
*
* Parameters:
* filename (string) default: average.dat
*   The name of the data file.
**/
:args:
cString fname "average.dat"
:body:
population->GetStats().PrintAverageData(fname);

print_error_data
:descr:
/**
* Prints out various data related to statistical errors.
*
* Parameters:
* filename (string) default: error.dat
*   The name of the data file.
**/
:args:
cString fname "error.dat"
:body:
population->GetStats().PrintErrorData(fname);

print_variance_data
:descr:
/**
* Prints out various variances.
*
* Parameters:
* filename (string) default: variance.dat
*   The name of the data file.
**/
:args:
cString fname "variance.dat"
:body:
population->GetStats().PrintVarianceData(fname);

print_dominant_data
:descr:
/**
* Output various quantities related to the dominant organism.
*
* Parameters:
* filename (string) default: dominant.dat
*   The name of the data file.
**/
:args:
cString fname "dominant.dat"
:body:
population->GetStats().PrintDominantData(fname);

print_stats_data
:descr:
/**
* Output various statistical quantities.
*
* Parameters:
* filename (string) default: stats.dat
*   The name of the data file.
**/
:args:
cString fname "stats.dat"
:body:
population->GetStats().PrintStatsData(fname);

print_count_data
:descr:
/**
* Output various counts, such as number of organisms etc.
*
* Parameters:
* filename (string) default: count.dat
*   The name of the data file.
**/
:args:
cString fname "count.dat"
:body:
population->GetStats().PrintCountData(fname);

print_totals_data
:descr:
/**
* Various total numbers.
*
* Parameters:
* filename (string) default: totals.dat
*   The name of the data file.
**/
:args:
cString fname "totals.dat"
:body:
population->GetStats().PrintTotalsData(fname);

print_tasks_data
:descr:
/**
* Output the number of times the various tasks have been performed in the
* last update.
*
* Parameters:
* filename (string) default: tasks.dat
*   The name of the data file.
**/
:args:
cString fname "tasks.dat"
:body:
population->GetStats().PrintTasksData(fname);

print_tasks_exe_data
:descr:
/**
**/
:args:
cString fname "tasks_exe.dat"
:body:
population->GetStats().PrintTasksExeData(fname);

print_resource_data
:descr:
/**
**/
:args:
cString fname "resource.dat"
:body:
population->GetStats().PrintResourceData(fname);

print_time_data
:descr:
/**
* Output time related data, such as update, generation, etc.
*
* Parameters:
* filename (string) default: time.dat
*   The name of the data file.
**/
:args:
cString fname "time.dat"
:body:
population->GetStats().PrintTimeData(fname);

print_mutation_data
:descr:
/**
**/
:args:
cString fname "mutation.dat"
:body:
population->GetStats().PrintMutationData(fname);

######### Instruction Data Output ##############
print_instruction_data
:descr:
/**
**/
:args:
cString fname "instruction.dat"
:body:
population->GetStats().PrintInstructionData(fname);

print_dom_instruction_data
:descr:
/**
**/
:args:
cString fname "dom_instruction.dat"
:body:
population->GetStats().PrintDomInstructionData(fname);

########### Misc Output #################3
print_depth_histogram
:descr:
/**
**/
:args:
cString filename "depth_histogram.dat"
:body:
ofstream & fp = population->GetStats().GetDataFileOFStream(filename);
cAnalyzeUtil::PrintDepthHistogram(fp, population);

print_genotype_abundance_histogram
:descr:
/**
* Writes out a genotype abundance histogram.
*
* Parameters:
* filename (string) default: genotype_abundance_histogram.dat
*   The name of the file into which the histogram is written.
**/
:args:
cString filename "genotype_abundance_histogram.dat"
:body:
ofstream & fp = population->GetStats().GetDataFileOFStream(filename);
cAnalyzeUtil::PrintGenotypeAbundanceHistogram(fp, population);

print_species_abundance_histogram
:descr:
/**
* Writes out a species abundance histogram.
*
* Parameters:
* filename (string) default: species_abundance_histogram.dat
*   The name of the file into which the histogram is written.
**/
:args:
cString filename "species_abundance_histogram.dat"
:body:
ofstream & fp = population->GetStats().GetDataFileOFStream(filename);
cAnalyzeUtil::PrintSpeciesAbundanceHistogram(fp, population);

print_lineage_totals
:descr:
/**
**/
:args:
cString fname "lineage_totals.dat"
int verbose 1
:body:
static bool msg_printed = false;
if (population->GetLineageControl() == NULL) {
  if ( msg_printed == false ){
    ofstream & fp = population->GetStats().GetDataFileOFStream(fname);
    fp << "No lineage data available!" << endl;
    msg_printed = true;
  }
  return;
}
population->GetLineageControl()->PrintLineageTotals(fname, verbose);

print_lineage_counts
:descr:
/**
**/
:args:
cString fname "lineage_counts.dat"
int verbose 0
:body:
static bool msg_printed = false;
if (population->GetLineageControl() == NULL) {
  if ( msg_printed == false ){
    ofstream & fp = population->GetStats().GetDataFileOFStream(fname);
    fp << "No lineage data available!" << endl;
    msg_printed = true;
  }
  return;
}
if (verbose) {    // verbose mode is the same in both methods
  population->GetLineageControl()->PrintLineageTotals(fname, verbose);
  return;
}
population->GetLineageControl()->PrintLineageCurCounts(fname);

print_dom
:descr:
/**
* Write the currently dominant genotype to disk.
*
* Parameters:
* filename (string)
*   The name under which the genotype should be saved. If no
*   filename is given, the genotype is saved into the directory
*   genebank, under the name that the genebank has associated with
*   this genotype.
**/
:args:
cString in_filename ""
:body:
cGenotype * dom = population->GetGenebank().GetBestGenotype();
cString filename(in_filename);
if (filename == "") filename.Set("genebank/%s", dom->GetName()());
cTestUtil::PrintGenome(dom->GetGenome(), filename, dom, population->GetUpdate());

######### SAVE/LOAD POPULATION  ######################
save_population
:descr:
/**
* Saves the full state of the population.
*
* Parameters:
* filename (string) default: save_pop.*
*   The name of the file into which the population should
*   be saved. If it is not given, then the name 'save_pop.*'
*   is used, with '*' replaced by the current update.
**/
:args:
cString fname ""
:body:
cString filename;
if( fname == "" ){
  filename.Set("save_pop.%d", population->GetUpdate());
}
ofstream fp(filename());
population->SavePopulation(fp);

load_population
:descr:
/**
* Loads the full state of the population.
*
* Parameters:
* filename (string)
*   The name of the file to open.
**/
:args:
cString fname
:body:
ifstream fp(fname());
population->LoadPopulation(fp);


######### CLONES ######################
save_clone
:descr:
/**
**/
:args:
cString fname ""
:body:
cString filename;
if( fname == "" ){
  filename.Set("clone.%d", population->GetUpdate());
}
ofstream fp(filename());
population->SaveClone(fp);

load_clone
:descr:
/**
**/
:args:
cString fname
:body:
ifstream fp(fname());
population->LoadClone(fp);


load_dump_file
:descr:
/**
* Sets up a population based on a dump file such as written out by
* detail_pop. It is also possible to append a history file to the dump
* file, in order to preserve the history of a previous run.
**/
:args:
cString fname
int update -1
:body:
population->LoadDumpFile(fname, update);

########## DUMP A TEXT SUMMARY ###########
dump_pop
:descr:
/**
* Writes out a line of data for each genotype in the current population. The
* line contains the genome as string, the number of organisms of that genotype,
* and the genotype ID.
*
* Parameters:
* filename (string) default: "dump.<update>"
*   The name of the file into which the population dump should be written.
**/
:args:
cString fname ""
:body:
cString filename;
if( fname == "" ){
  filename.Set("dump.%d", population->GetUpdate());
}
ofstream fp(filename());
population->GetGenebank().DumpTextSummary(fp);

detail_pop
:descr:
/**
* Like dump_pop, but more detailed data is written out.
*
* Parameters:
* filename (string) default: "detail_pop.<update>"
*   The name of the file into which the population dump should be written.
**/
:args:
cString fname ""
:body:
cString filename;
if( fname == "" ){
  filename.Set("detail_pop.%d", population->GetUpdate());
}
ofstream fp(filename());
population->GetGenebank().DumpDetailedSummary(fp);

dump_historic_pop
:descr:
/**
* Similar to detail_pop. However, only genotypes that are not in the
* current population anymore are included. Genotypes that are not in
* the line of descent of any of the current genotypes to the ultimate 
* ancestor are excluded.
*
* Parameters:
* filename (string) default: "historic_dump.<update>"
*   The name of the file into which the historic dump should be written.
**/
:args:
cString fname ""
:body:
cString filename;
if( fname == "" ){
  filename.Set("historic_dump.%d", population->GetUpdate());
}
ofstream fp(filename());
population->GetGenebank().DumpHistoricSummary(fp);

dump_memory
:descr:
/**
* Dump the current memory state of all CPUs to a file.
**/
:args:
cString fname ""
:body:
cString filename;
if (fname == "") {
  filename.Set("memory_dump.%d", population->GetUpdate());
}
ofstream fp(filename());
population->DumpMemorySummary(fp);

################ INJECT ###################
inject
:descr:
/**
* Injects a single organism into the population.
*
* Parameters:
* filename (string)
*   The filename of the genotype to load. If this is left empty, or the keyword
*   "START_CREATURE" is given, than the genotype specified in the genesis
*   file under "START_CREATURE" is used.
* cell ID (integer) default: 0
*   The grid-point into which the organism should be placed.
* merit (double) default: -1
*   The initial merit of the organism. If set to -1, this is ignored.
* lineage label (integer) default: 0
*   An integer that marks all descendants of this organism.
* neutral metric (double) default: 0
*   A double value that randomly drifts over time.
**/
:args:
cString fname "START_CREATURE"
int cell_id 0
double merit -1
int lineage_label 0
double neutral_metric 0
:body:
if (fname == "START_CREATURE") fname=cConfig::GetStartCreature();
cGenome genome =
   cInstUtil::LoadGenome(fname, population->GetEnvironment().GetInstLib());
population->Inject(genome, cell_id, merit, lineage_label, neutral_metric);

inject_all
:descr:
/**
* Injects identical organisms into all cells of the population.
*
* Parameters:
* filename (string)
*   The filename of the genotype to load. If this is left empty, or the keyword
*   "START_CREATURE" is given, than the genotype specified in the genesis
*   file under "START_CREATURE" is used.
* merit (double) default: -1
*   The initial merit of the organism. If set to -1, this is ignored.
* lineage label (integer) default: 0
*   An integer that marks all descendants of this organism.
* neutral metric (double) default: 0
*   A double value that randomly drifts over time.
**/
:args:
cString fname "START_CREATURE"
double merit -1
int lineage_label 0
double neutral_metric 0
:body:
if (fname == "START_CREATURE") fname=cConfig::GetStartCreature();
cGenome genome =
   cInstUtil::LoadGenome(fname, population->GetEnvironment().GetInstLib());
for (int i = 0; i < population->GetSize(); i++) {
  population->Inject(genome, i, merit, lineage_label, neutral_metric);
}
population->SetSyncEvents(true);

inject_range
:descr:
/**
* Injects identical organisms into a range of cells of the population.
*
* Parameters:
* filename (string)
*   The filename of the genotype to load. If this is left empty, or the keyword
*   "START_CREATURE" is given, than the genotype specified in the genesis
*   file under "START_CREATURE" is used.
* start_cell (int)
*   First cell to inject into.
* stop_cell (int)
*   First cell *not* to inject into.
* merit (double) default: -1
*   The initial merit of the organism. If set to -1, this is ignored.
* lineage label (integer) default: 0
*   An integer that marks all descendants of this organism.
* neutral metric (double) default: 0
*   A double value that randomly drifts over time.
*
* Example:
*   inject_range creature.gen 0 10
*
* Will inject 10 organisms into cells 0 through 9.
**/
:args:
cString fname "START_CREATURE"
int start_cell 0
int end_cell -1
double merit -1
int lineage_label 0
double neutral_metric 0
:body:
if (fname == "START_CREATURE") fname=cConfig::GetStartCreature();
if (end_cell == -1) end_cell = start_cell + 1;
if (start_cell < 0 ||
    end_cell > population->GetSize() ||
    start_cell >= end_cell) {
  cout << "Warning: inject_range has invalid range!";
}
else {
  cGenome genome =
     cInstUtil::LoadGenome(fname, population->GetEnvironment().GetInstLib());
  for (int i = start_cell; i < end_cell; i++) {
    population->Inject(genome, i, merit, lineage_label, neutral_metric);
  }
  population->SetSyncEvents(true);
}

inject_sequence
:descr:
/**
* Injects identical organisms into a range of cells of the population.
*
* Parameters:
* sequence (string)
*   The genome sequence for this organism.  This is a mandatory argument.
* start_cell (int)
*   First cell to inject into.
* stop_cell (int)
*   First cell *not* to inject into.
* merit (double) default: -1
*   The initial merit of the organism. If set to -1, this is ignored.
* lineage label (integer) default: 0
*   An integer that marks all descendants of this organism.
* neutral metric (double) default: 0
*   A double value that randomly drifts over time.
*
* Example:
*   inject_range ckdfhgklsahnfsaggdsgajfg 0 10 100
*
* Will inject 10 organisms into cells 0 through 9 with a merit of 100.
**/
:args:
cString seq
int start_cell 0
int end_cell -1
double merit -1
int lineage_label 0
double neutral_metric 0
:body:
if (end_cell == -1) end_cell = start_cell + 1;
if (start_cell < 0 ||
    end_cell > population->GetSize() ||
    start_cell >= end_cell) {
  cout << "Warning: inject_sequence has invalid range!";
}
else {
  cGenome genome(seq);
  for (int i = start_cell; i < end_cell; i++) {
    population->Inject(genome, i, merit, lineage_label, neutral_metric);
  }
  population->SetSyncEvents(true);
}

inject_random
:descr:
/**
* Injects a randomly generated genome into the population.
*
* Parameters:
* length (integer) [required]
*   Number of instructions in the randomly generated genome.
* cell ID (integer) default: -1
*   The grid-point into which the genome should be placed.  Default is random.
* merit (double) default: -1
*   The initial merit of the organism. If set to -1, this is ignored.
* lineage label (integer) default: 0
*   An integer that marks all descendants of this organism.
* neutral metric (double) default: 0
*   A double value that randomly drifts over time.
**/
:args:
int length
int cell_id -1
double merit -1
int lineage_label 0
double neutral_metric 0
:body:
if (cell_id == -1) cell_id = g_random.GetUInt(population->GetSize());
cGenome genome =
   cInstUtil::RandomGenome(length, population->GetEnvironment().GetInstLib());
population->Inject(genome, cell_id, merit, lineage_label, neutral_metric);


################ MUTATION RATES ###############
zero_muts
:descr:
/**
 * This event will set all mutation rates to zero...
 **/
:args:
:body:
for (int i = 0; i < population->GetSize(); i++) {
  population->GetCell(i).MutationRates().Clear();
}

mod_copy_mut
:descr:
/**
**/
:args:
double cmut_inc
int cell -1
:body:
const double new_cmut = cConfig::GetCopyMutProb() + cmut_inc;
if (cell < 0) {   // cell == -1  -->  all
  for (int i = 0; i < population->GetSize(); i++) {
    population->GetCell(i).MutationRates().SetCopyMutProb(new_cmut);
  }
  cConfig::SetCopyMutProb(new_cmut);
} else {
  population->GetCell(cell).MutationRates().SetCopyMutProb(new_cmut);
}

set_copy_mut
:descr:
/**
**/
:args:
double cmut
int start_cell -1
int end_cell -1
:body:
if (start_cell < 0) {   // start_cell == -1  -->  all
  cConfig::SetCopyMutProb(cmut);
  start_cell = 0;
  end_cell = population->GetSize();
}
else if (end_cell < -1)  { // end_cell == -1 --> Only one cell!
  end_cell = start_cell + 1;
}
assert(start_cell >= 0 && start_cell < population->GetSize());
assert(end_cell > 0 && end_cell <= population->GetSize());
for (int i = start_cell; i < end_cell; i++) {
  population->GetCell(i).MutationRates().SetCopyMutProb(cmut);
}

mod_point_mut
:descr:
/**
**/
:args:
double pmut_inc
int cell -1
:body:
const double new_pmut = cConfig::GetPointMutProb() + pmut_inc;
if (cell < 0) {   // cell == -1   -->  all
  for (int i = 0; i < population->GetSize(); i++) {
    population->GetCell(i).MutationRates().SetPointMutProb(new_pmut);
  }
  cConfig::SetPointMutProb(new_pmut);
} else {
  population->GetCell(cell).MutationRates().SetPointMutProb(new_pmut);
}

set_point_mut
:descr:
/**
**/
:args:
double pmut
int cell -1
:body:
if (cell < 0) {   // cell == -1   -->  all
  for (int i = 0; i < population->GetSize(); i++) {
    population->GetCell(i).MutationRates().SetPointMutProb(pmut);
  }
  cConfig::SetPointMutProb(pmut);
} else {
  population->GetCell(cell).MutationRates().SetPointMutProb(pmut);
}

######## Landscapeing #########
calc_landscape
:descr:
/**
**/
:args:
int landscape_dist  1
:body:
cGenome & genome = population->GetGenebank().GetBestGenotype()->GetGenome();
cAnalyzeUtil::CalcLandscape(landscape_dist, genome,
                            population->GetEnvironment().GetInstLib());

predict_w_landscape
:descr:
/**
**/
:args:
cString datafile "land-predict.dat"
:body:
cGenome & genome = population->GetGenebank().GetBestGenotype()->GetGenome();
cLandscape landscape(genome, population->GetEnvironment().GetInstLib());
static ofstream fp(datafile);
landscape.PredictWProcess(fp);

predict_nu_landscape
:descr:
/**
**/
:args:
cString datafile "land-predict.dat"
:body:
cGenome & genome = population->GetGenebank().GetBestGenotype()->GetGenome();
cLandscape landscape(genome, population->GetEnvironment().GetInstLib());
static ofstream fp(datafile);
landscape.PredictNuProcess(fp);

sample_landscape
:descr:
/**
**/
:args:
int sample_size 0
:body:
cGenome & genome = population->GetGenebank().GetBestGenotype()->GetGenome();
cLandscape landscape(genome, population->GetEnvironment().GetInstLib());
if (sample_size == 0) sample_size = population->GetEnvironment().GetInstLib().GetSize() - 1;
landscape.SampleProcess(sample_size);
static ofstream fp("land-sample.dat");
landscape.PrintStats(fp, population->GetUpdate());

random_landscape
:descr:
/**
**/
:args:
int landscape_dist  1
int sample_size     0
int min_found       0
int max_sample_size 0
bool print_if_found  false
:body:
cGenome & genome = population->GetGenebank().GetBestGenotype()->GetGenome();
cLandscape landscape(genome, population->GetEnvironment().GetInstLib());
landscape.RandomProcess(sample_size, landscape_dist, min_found,
                        max_sample_size, print_if_found);
static ofstream fp("land-random.dat");
landscape.PrintStats(fp, population->GetUpdate());

analyze_landscape
:descr:
/**
**/
:args:
int sample_size     1000
int min_found       0
int max_sample_size 0
:body:
cGenome & genome = population->GetGenebank().GetBestGenotype()->GetGenome();
cAnalyzeUtil::
AnalyzeLandscape(genome, population->GetEnvironment().GetInstLib(),
 		 sample_size, min_found, max_sample_size,
		 population->GetUpdate());

pairtest_landscape
:descr:
/**
* If sample_size = 0, pairtest the full landscape.
**/
:args:
int sample_size 0
:body:
cGenome & genome = population->GetGenebank().GetBestGenotype()->GetGenome();
cAnalyzeUtil::PairTestLandscape(genome, population->GetEnvironment().GetInstLib(), sample_size, population->GetUpdate());

test_dom
:descr:
/**
**/
:args:
:body:
cGenome & genome = population->GetGenebank().GetBestGenotype()->GetGenome();
static ofstream fp("dom-test.dat");
cAnalyzeUtil::TestGenome(genome, population->GetEnvironment().GetInstLib(), fp, population->GetUpdate());

analyze_population
:descr:
/**
**/
:args:
double sample_prob 1
int landscape 0
int save_genotype 0
cString filename ""
:body:
static bool auto_filename = false;
if( filename == "" )
  auto_filename = true;
if ( auto_filename )
  filename.Set("population_info_%d.dat",population->GetUpdate());
ofstream population_info(filename());
cAnalyzeUtil::AnalyzePopulation(population, population_info, sample_prob,
				landscape, save_genotype);

print_detailed_fitness_data
:descr:
/**
**/
:args:
int save_max_f_genotype 0
int print_fitness_histo 0
double hist_fmax 1
double hist_fstep 0.1
cString filename "fitness.dat"
cString filename2 "fitness_histos.dat"
cString filename3 "fitness_histos_testCPU.dat"
:body:
static ofstream datafile(filename());
static ofstream histofile;
static ofstream histofile_testCPU;
if (print_fitness_histo && !histofile.is_open()){
  histofile.open(filename2());
  histofile_testCPU.open(filename3());
}
cAnalyzeUtil::PrintDetailedFitnessData( population, datafile, histofile, histofile_testCPU, save_max_f_genotype, print_fitness_histo, hist_fmax, hist_fstep );

print_genetic_distance_data
:descr:
/**
**/
:args:
cString creature_name ""
cString filename "genetic_distance.dat"
:body:
static ofstream popdump(filename());
if( creature_name == "" || creature_name == "START_CREATURE" ){
  creature_name = cConfig::GetStartCreature(); }
cAnalyzeUtil::PrintGeneticDistanceData( population, popdump, creature_name() );

genetic_distance_pop_dump
:descr:
/**
**/
:args:
cString creature_name ""
cString filename ""
int save_genotype 0
:body:
static bool auto_filename = false;
if( creature_name == "" || creature_name == "START_CREATURE" ){
  creature_name = cConfig::GetStartCreature(); }
if( filename == "" || filename == "AUTO" )
  auto_filename = true;
if ( auto_filename )
  filename.Set("pop_dump_%d.dat",population->GetUpdate());
ofstream popdump(filename());
cAnalyzeUtil::GeneticDistancePopDump( population, popdump, creature_name(), save_genotype );


task_snapshot
:descr:
/**
**/
:args:
cString filename ""
:body:
static bool auto_filename = false;
if( filename == "" )
  auto_filename = true;
if ( auto_filename )
  filename.Set("tasks_%d.dat",population->GetUpdate());
ofstream snapshot_file(filename());
cAnalyzeUtil::TaskSnapshot( population, snapshot_file );

print_viable_tasks_data
:descr:
/**
**/
:args:
cString filename "viable_tasks.dat"
:body:
static ofstream datafile(filename());
cAnalyzeUtil::PrintViableTasksData( population, datafile );


############ Removal of creatures #############
apocalypse
:descr:
/**
* Randomly removes a certain proportion of the population.
*
* Parameters:
* removal probability (double) default: 0.9
*   The probability with which a single organism is removed.
**/
:args:
double kill_prob .9
:body:
for (int i = 0; i < population->GetSize(); i++) {
  cPopulationCell & cell = population->GetCell(i);
  if (cell.IsOccupied() == false) continue;
  if (g_random.P(kill_prob))  population->KillOrganism(cell);
}

rate_kill
:descr:
/**
* Randomly removes a certain proportion of the population.
* In principle, this event does the same thing as the apocalypse event.
* However, instead of a probability, here one has to specify a rate. The
* rate has the same unit as fitness. So if the average fitness is 20000,
* than you remove 50% of the population on every update with a removal rate
* of 10000.
*
* Parameters:
* removal rate (double)
*   The rate at which organisms are removed.
**/
:args:
double kill_rate
:body:
const double ave = population->GetStats().SumMerit().Average();
const double kill_prob = cConfig::GetAveTimeslice()*(kill_rate / ave);
for (int i = 0; i < population->GetSize(); i++) {
  cPopulationCell & cell = population->GetCell(i);
  if (cell.IsOccupied() == false) continue;
  if (g_random.P(kill_prob))  population->KillOrganism(cell);
}

serial_transfer
:descr:
/**
* This event does again the same thing as apocalypse. However, now
* the number of organisms to be retained can be specified
* exactly. Also, it is possible to specify whether any of these
* organisms may be dead or not.
*
* Parameters:
* transfer size (int) default: 1
*   The number of organisms to retain. If there are fewer living
*   organisms than the specified transfer size, then all living
*   organisms are retained.
* ignore deads (int) default: 1
*   When set to 1, only living organisms are retained. Otherwise,
*   every type of organism can be retained.
**/
:args:
int transfer_size 1
int ignore_deads 1
:body:
population->SerialTransfer( transfer_size, ignore_deads );


############ Hill Climbing #############
hillclimb
:descr:
/**
* Does a hill climb with the dominant genotype.
**/
:args:
:body:
cGenome & genome = population->GetGenebank().GetBestGenotype()->GetGenome();
ofstream fp("hillclimb.dat");
cLandscape landscape(genome, population->GetEnvironment().GetInstLib());
landscape.HillClimb(fp);

hillclimb_neut
:descr:
/**
**/
:args:
:body:
cGenome & genome = population->GetGenebank().GetBestGenotype()->GetGenome();
ofstream fp("hillclimb.dat");
cLandscape landscape(genome, population->GetEnvironment().GetInstLib());
landscape.HillClimb_Neut(fp);

hillclimb_rand
:descr:
/**
**/
:args:
:body:
cGenome & genome = population->GetGenebank().GetBestGenotype()->GetGenome();
ofstream fp("hillclimb.dat");
cLandscape landscape(genome, population->GetEnvironment().GetInstLib());
landscape.HillClimb_Rand(fp);

############ Consensus #############
calc_consensus
:descr:
/**
* Calculates the consensus sequence.
*
* Parameters:
* lines saved (integer) default: 0
*    ???
**/
:args:
int lines_saved 0
:body:
cAnalyzeUtil::CalcConsensus(population, lines_saved);

############ Other Population Called Tests ##########
test_size_change_robustness
:descr:
/**
**/
:args:
int num_trials 100
cString filename "size_change.dat"
:body:
ofstream & fp = population->GetStats().GetDataFileOFStream(filename);
cAnalyzeUtil::TestInsSizeChangeRobustness(fp,
		population->GetEnvironment().GetInstLib(),
		population->GetGenebank().GetBestGenotype()->GetGenome(),
		num_trials, population->GetUpdate());

########### Threads ################
test_threads
:descr:
/**
**/
:args:
:body:
cTestCPU::TestThreads(population->GetGenebank().GetBestGenotype()->GetGenome());

print_threads
:descr:
/**
**/
:args:
:body:
cTestCPU::PrintThreads( population->GetGenebank().GetBestGenotype()->GetGenome() );

########### Grid Output ##############
# This event depends on the ncurses viewer (cSymbolUtil).
# That's not good. The event can only be reactivated if that
# dependency is removed. Claus
#dump_basic_grid
#:descr:
#/**
#**/
#:args:
#:body:
#cString filename;
#filename.Set("grid.%	05d.out", population->GetUpdate());
#ofstream fp(filename());
#for (int i = 0; i < population->GetWorldX(); i++) {
#  for (int j = 0; j < population->GetWorldY(); j++) {
#    cPopulationCell & cell = population->GetCell(j*population->GetWorldX()+i);
#    char out_char = cSymbolUtil::GetBasicSymbol(cell);
#    switch (out_char) {
#      case ' ':
#        fp << -3;
#        break;
#      case '.':
#        fp << -2;
#        break;
#      case '+':
#        fp << -1;
#        break;
#      default:
#        fp << out_char - 'A';
#    }
#    fp << " ";
#  }
#  fp << endl;
#}
#
dump_fitness_grid
:descr:
/**
* Writes out all fitness values of the organisms currently in the
* population.
*
* The output file is called "fgrid.*.out", where '*' is replaced by the
* number of the current update.
**/
:args:
:body:
cString filename;
filename.Set("fgrid.%05d.out", population->GetUpdate());
ofstream fp(filename());
for (int i = 0; i < population->GetWorldX(); i++) {
  for (int j = 0; j < population->GetWorldY(); j++) {
    cPopulationCell & cell = population->GetCell(j*population->GetWorldX()+i);
    double fitness = (cell.IsOccupied()) ?
	 cell.GetOrganism()->GetGenotype()->GetFitness() : 0.0;
    fp << fitness << " ";
  }
  fp << endl;
}

######### Tree Reconstruction ##########
print_tree_depths
:descr:
/**
* Reconstruction of phylogenetic trees.
**/
:args:
cString filename ""
:body:
if (filename == "") filename.Set("tree_depth.%d.dat", population->GetUpdate());
ofstream fp(filename);
cAnalyzeUtil::PrintTreeDepths(population, fp);


########## Resources ############
inject_resource
:descr:
/**
* Inject a specified amount of a specified resource.
**/
:args:
cString res_name
double res_count
:body:
cResourceLib & res_lib = population->GetEnvironment().GetResourceLib();
int res_id = res_lib.GetResource(res_name)->GetID();
population->UpdateResource(res_id, res_count);
