dnl ****************************************
dnl             Initial checks
dnl ****************************************
dnl checks whether file defs.hh exists
AC_INIT(source/defs.hh)


dnl ****************************************
dnl        Package name and version
dnl ****************************************
AM_INIT_AUTOMAKE(avida, 1.99)


dnl ****************************************
dnl General checks for c-compiler, c++compiler, ...
dnl ****************************************

dnl clear flags for c and c++ compiler
CFLAGS=
CXXFLAGS=

dnl check for c compiler
AC_PROG_CC

dnl support for executable extensions
AC_EXEEXT

dnl check for c++ compiler
AC_PROG_CXX

dnl check for c preprocessor
AC_PROG_CPP

dnl check for library generator
AC_PROG_RANLIB

dnl check for perl compiler
AC_CHECK_PROG(PERL,
	perl,
	yes,
        no)

if test ${PERL} = "no"; then
   AC_MSG_ERROR(perl compiler not found! Must have perl in the search path to compile Avida. Please set your PATH variable accordingly.)
fi

dnl ****************************************
dnl            Configure options
dnl ****************************************

dnl debugging/profiling
AC_ARG_ENABLE(debug,
  [  --enable-debug: Compile with debugging symbols],
  [CPPFLAGS="-g -DDEBUG"; qmake_debug="debug"],
  [CPPFLAGS="-O3 -ffast-math"; qmake_debug="release"])

AC_ARG_ENABLE(gnu-debug,
  [  --enable-gnu-debug: Compile with special debugging symbols for the gnu debugger gdb],
  [CPPFLAGS="-ggdb -DDEBUG"; qmake_debug="debug"])

AC_ARG_ENABLE(opt-debug,
  [  --enable-opt-debug: Compile with both debugging symbols and optimizations],
  [CPPFLAGS="-g -DDEBUG -O3 -ffast-math"; qmake_debug="debug"])

AM_CONDITIONAL(QMAKE_DEBUG, test x$qmake_debug = xdebug)

AC_ARG_ENABLE(warn-on,
  [  --enable-warn-on: Use extra warnings in Qt builds],
  [qmake_warn="warn_on"],
  [qmake_warn="warn_off"])

AM_CONDITIONAL(QMAKE_WARN, test x$qmake_warn = xwarn_on)

AC_ARG_ENABLE(profile,
  [  --enable-profile: Compile with profiling symbols],
  [CPPFLAGS="${CPPFLAGS} -pg -a"; LDFLAGS="${LDFLAGS} -pg"])

AC_ARG_ENABLE(pedantic,
  [  --enable-pedantic: Compile with profiling symbols],
  [CPPFLAGS="${CPPFLAGS} -pedantic"])

dnl ****************************************
dnl Checks for ncurses viewer
dnl ****************************************

AC_ARG_ENABLE(viewer,
  [  --enable-viewer: Compile with ncurses viewer],
  [AC_CHECK_LIB(ncurses,
    getch,
    [AC_CHECK_HEADERS(ncurses.h,
      [viewer=true;],
      [viewer=false; echo "  ncurses library not found. Cannot build text viewer!"])],
    [viewer=false; echo "  ncurses library not found. Cannot build text viewer!"])],
  [viewer=false])
AM_CONDITIONAL(VIEWER, test x$viewer = xtrue)

dnl ****************************************
dnl Checks for qt viewer
dnl ****************************************

AC_ARG_ENABLE(qt-viewer,
  [  --enable-qt-viewer: Compile with qt viewer],
  [qt_viewer=true ],
  [qt_viewer=false])

if test "$qt_viewer" = true; then

  AC_MSG_CHECKING(environment variable QTDIR)
  if test -z ${QTDIR}; then
    AC_MSG_RESULT(not set)
    AC_MSG_WARN(The environment variable \$QTDIR)
    AC_MSG_WARN(should be set to the install point)
    AC_MSG_WARN(of Qt version 3.0.0 or greater.)
    AC_MSG_WARN()
    AC_MSG_WARN(For information about Trolltech's Qt and qmake,)
    AC_MSG_WARN(see http://www.trolltech.com)
    AC_MSG_WARN()
    AC_MSG_ERROR(environment variable \$QTDIR not set.)
  fi
  AC_MSG_RESULT(\$QTDIR = $QTDIR)

  AC_PATH_PROG(QMAKE, qmake, no, $QTDIR/bin)
  if test ${QMAKE} = "no"; then
    AC_MSG_WARN(Couldn't find \$QTDIR/bin/qmake;)
    AC_MSG_WARN(verify that the environment variable \$QTDIR)
    AC_MSG_WARN(is set to the install point)
    AC_MSG_WARN(of Qt version 3.0.0 or greater,)
    AC_MSG_WARN(and that \$QTDIR/bin/qmake)
    AC_MSG_WARN(is in the Qt installation.)
    AC_MSG_WARN()
    AC_MSG_WARN(For information about Trolltech's Qt and qmake,)
    AC_MSG_WARN(see http://www.trolltech.com)
    AC_MSG_WARN()
    AC_MSG_ERROR($QTDIR/bin/qmake not found.)
  fi
fi

AM_CONDITIONAL(QT_VIEWER, test x$qt_viewer = xtrue)


dnl installation
AC_ARG_ENABLE(standard-prefix,
  [  --enable-standard-prefix: Switch off overriding of: prefix bindir datadir],
  ,
  [AC_PREFIX_DEFAULT(~+)
   bindir='${exec_prefix}/work';datadir='${prefix}/work'])


dnl ****************************************
dnl         Variable substitutions
dnl ****************************************

dnl The following environment variables are imported into the
dnl Makefile (CPPFLAGS is imported automatically).
AC_SUBST(VIEW)
AC_SUBST(VIEW_LIBS)

dnl ****************************************
dnl           Makefile generation
dnl ****************************************
AC_OUTPUT(Makefile source/Makefile
  source/tools/Makefile source/cpu/Makefile
  source/event/Makefile source/viewers/Makefile
  source/main/Makefile
  source/support/Makefile
  source/support/preset_organisms/Makefile
  source/qt-viewer/Makefile
dnl  source/qt-viewer/exp/Makefile
dnl  source/qt-viewer/exp/share/Makefile
)




